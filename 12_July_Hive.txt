1) Write a Python program that uses the HiveQL language to create a table named "Employees" with columns for "id," "name," and "salary."

from pyhive import hive
import sys
def create_employees_table():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()
        # HiveQL query to create the Employees table
        query = """
            CREATE TABLE IF NOT EXISTS Employees (
                id INT,
                name STRING,
                salary FLOAT
            )
        """
        # Execute the query
        cursor.execute(query)
        # Close the cursor and connection
        cursor.close()
        conn.close()
        print("Table 'Employees' has been created successfully.")
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    create_employees_table()

2. Create a Python program that retrieves records from a Hive table named "Customers" where the age is greater than 30

from pyhive import hive
import sys
def retrieve_customers_with_age_greater_than_30():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()
        # HiveQL query to retrieve customers with age greater than 30
        query = """
            SELECT *
            FROM Customers
            WHERE age > 30
        """
        # Execute the query
        cursor.execute(query)
        # Fetch all the records
        results = cursor.fetchall()
        # Close the cursor and connection
        cursor.close()
        conn.close()
        # Process the results (printing here as an example)
        for record in results:
            print(record)
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    retrieve_customers_with_age_greater_than_30()

3. Write a Python script that sorts records in descending order based on the "timestamp" column in a Hive table named "Logs."
 

from pyhive import hive
import sys
def sort_logs_by_timestamp_desc():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()
        # HiveQL query to sort records in descending order by timestamp
        query = """
            SELECT *
            FROM Logs
            ORDER BY timestamp DESC
        """
        # Execute the query
        cursor.execute(query)
        # Fetch all the records
        results = cursor.fetchall()
        # Close the cursor and connection
        cursor.close()
        conn.close()
        # Process the results (printing here as an example)
        for record in results:
            print(record)
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    sort_logs_by_timestamp_desc()

4. Write a Python program that connects to a Hive server using PyHive library and retrieves all records from a table named "Products".

from pyhive import hive
import sys
def retrieve_all_products():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()

        # HiveQL query to retrieve all records from the "Products" table4\
        query = "SELECT * FROM Products"

        # Execute the query
        cursor.execute(query)
        # Fetch all the records
        results = cursor.fetchall()
        # Close the cursor and connection
        cursor.close()
        conn.close()
        # Process the results (printing here as an example)
        for record in results:
            print(record)
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    retrieve_all_products()

5. Write a Python script that calculates the average salary of employees from a Hive table named "Employees".
 
from pyhive import hive
import sys
def calculate_average_salary():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()
        # HiveQL query to calculate the average salary of employees
        query = "SELECT AVG(salary) FROM Employees"
        # Execute the query
        cursor.execute(query)
        # Fetch the result (average salary)
        average_salary = cursor.fetchone()[0]
        # Close the cursor and connection
        cursor.close()
        conn.close()
        # Print the average salary
        print("Average Salary of Employees:", average_salary)
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    calculate_average_salary()

6.  Implement a Python program that uses Hive partitioning to create a partitioned table named "Sales_Data" based on the "year" and "month" columns.

query = 
        CREATE TABLE IF NOT EXISTS Sales_Data 
 	(sales_id ,product_name STRING,amount FLOAT)
         PARTITIONED BY (year INT, month INT)

7. Develop a Python script that adds a new column named "email" of type string to an existing Hive table named "Employees."

query = "ALTER TABLE Employees ADD COLUMN email STRING"

8.  Create a Python program that performs an inner join between two Hive tables, "Orders" and "Customers," based on a common column.

query = SELECT *FROM Orders
        INNER JOIN Customers
        ON Orders.customer_id = Customers.customer_id

9. Implement a Python program that uses the Hive SerDe library to process JSON data stored in a Hive table named "User_Activity_Logs."

from pyhive import hive
import json
import sys
def process_json_data():
    try:
        # Connect to Hive server
        conn = hive.Connection(host='YOUR_HIVE_SERVER_HOST',
                               port=10000,
                               username='YOUR_USERNAME',
                               password='YOUR_PASSWORD',
                               database='YOUR_DATABASE_NAME')
        # Create a cursor object to execute queries
        cursor = conn.cursor()
        # HiveQL query to select JSON data from the "User_Activity_Logs" table
        query = "SELECT * FROM User_Activity_Logs"
        # Execute the query
        cursor.execute(query)
        # Fetch all the records containing JSON data
        results = cursor.fetchall()
        # Process JSON data (printing here as an example)
        for record in results:
            # Assuming JSON data is in the first column (modify the index if needed)
            json_data = record[0]
            # Deserialize JSON data
            try:
                json_object = json.loads(json_data)
                # Process the JSON object as per your requirement
                print(json_object)
            except json.JSONDecodeError:
                print("Error decoding JSON data:", json_data)
        # Close the cursor and connection
        cursor.close()
        conn.close()
    except Exception as e:
        print("Error occurred:", str(e))
        sys.exit(1)
if __name__ == "__main__":
    process_json_data()

